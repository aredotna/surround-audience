{
  "name": "backbone-super-sync",
  "version": "0.0.21",
  "description": "Server-side Backbone.sync adapter using super agent.",
  "keywords": [
    "backbone",
    "sync"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/artsy/backbone-super-sync.git"
  },
  "author": {
    "name": "Craig Spaeth",
    "email": "craigspaeth@gmail.com",
    "url": "http://craigspaeth.com"
  },
  "engines": {
    "node": ">= 0.10.x"
  },
  "scripts": {
    "test": "mocha test.js -r should"
  },
  "dependencies": {
    "superagent": "*",
    "q": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "express": "*",
    "backbone": "*",
    "body-parser": "*"
  },
  "readme": "# Backbone Super Sync\n\nAn [isomorphic](http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/) Backbone.sync adapter using [super-agent](https://github.com/visionmedia/superagent).\n\n## Example\n\n````javascript\nvar Backbone = require('backbone');\nBackbone.sync = require('backbone-super-sync');\n````\n\n## Adding to the Backbone.sync request\n\nSometimes you need to add to the requests made by Backbone.sync, such as adding an XAPP token. Backbone Super Sync provides the method `editRequest` to intercept the super-agent request object before the request is made.\n\n**NOTE**: This is injected into _ALL_ server-side Backbone.sync calls. This behaves signifcantly different than when Backbone is used on the client. For instance you should not use this to add user-specific data to a request like an oauth access token or similar identifier where as on the client you might want to inject that kind of data sync-wide b/c the browser only represents one user.\n\n````javascript\nvar Backbone = require('backbone');\nvar superSync = require('backbone-super-sync');\nsuperSync.editRequest(function(req) {\n  req.set({ 'XAPP-TOKEN': 'foobar' });\n});\nBackbone.sync = superSync;\n````\n\nThe arguments of Backbone.sync are also passed to editRequest in case you need to globally adjust the request based off `options` or otherwise.\n\n````javascript\nsuperSync.editRequest(function(req, method, model, options) {\n  req.set({ 'X-ACCESS-TOKEN': options.user.get('access_token') });\n});\n````\n\n## Built-in request caching\n\nAt [Artsy](http://artsy.net) we naively cache our server-side Backbone.sync requests. You can configure Backbone Super Sync to do this by setting `superSync.cacheClient = client`. If the `cache: true` option is set in a `model.fetch`, Backbone Super Sync will use the `cacheClient` to cache GET requests. The `client` API is based off of [node-redis](https://github.com/mranney/node_redis) but you could easily leverage this API to roll your own caching mechanism.\n\ne.g.\n\n````javascript\nmemoryCache = {}\nsuperSync.cacheClient = {\n  set: function(key, val, callback) {\n    memoryCache[key] = val;\n    callback(null, 'OK');\n  }),\n  get: function(key, callback) {\n    callback(null, memoryCache[key]);\n  },\n  expire: function(key, expiresIn, callback) {\n    setTimeout(expiresIn / 1000, function() {\n      memoryCache[key] = null;\n      callback(null, 1);\n    });\n  }\n}\n// Cache expiry time. Uses seconds. Defaults to 3600 or 1 hour. You may\n// also pass `cacheTime: Number` in the options of a fetch to set per-request.\nsuperSync.defaultCacheTime = 60;\n\nnew Backbone.Model({ id: 'cach-me' }).fetch({\n  cache: true,\n  success: function() {}\n})\n````\n\nUse at your own riskâ€”remember [there are only two hard things](http://martinfowler.com/bliki/TwoHardThings.html).\n\n## Contributing\n\nPlease fork the project and submit a pull request with tests. Install node modules `npm install` and run tests with `npm test`\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/artsy/backbone-super-sync/issues"
  },
  "homepage": "https://github.com/artsy/backbone-super-sync",
  "_id": "backbone-super-sync@0.0.21",
  "_from": "backbone-super-sync@*"
}
